[{"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/index.js":"1","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/App.js":"2","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/reportWebVitals.js":"3","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Home.js":"4","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Profile.js":"5","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Login.js":"6","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Signup.js":"7","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/Footer/index.js":"8","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/Header/index.js":"9","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/auth.js":"10","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/queries.js":"11","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/mutations.js":"12","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/ProfileList/index.js":"13","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/SkillForm/index.js":"14","/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/SkillsList/index.js":"15","/Users/Tom/Bootcamp/SpeakEasy/client/src/index.js":"16","/Users/Tom/Bootcamp/SpeakEasy/client/src/App.js":"17","/Users/Tom/Bootcamp/SpeakEasy/client/src/reportWebVitals.js":"18","/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Login.js":"19","/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Profile.js":"20","/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Signup.js":"21","/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Home.js":"22","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Footer/index.js":"23","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Header/index.js":"24","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/queries.js":"25","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/auth.js":"26","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/mutations.js":"27","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/SkillsList/index.js":"28","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/SkillForm/index.js":"29","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Translator.js":"30","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/ProfileList/ProfileList.js":"31","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/language-code.js":"32","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/token.js":"33","/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/speech.js":"34"},{"size":500,"mtime":1642664389997,"results":"35","hashOfConfig":"36"},{"size":1929,"mtime":1642664389995,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1642664389998,"results":"38","hashOfConfig":"36"},{"size":704,"mtime":1642664389997,"results":"39","hashOfConfig":"36"},{"size":930,"mtime":1642664389997,"results":"40","hashOfConfig":"36"},{"size":2500,"mtime":1642664389997,"results":"41","hashOfConfig":"36"},{"size":2725,"mtime":1642664389997,"results":"42","hashOfConfig":"36"},{"size":632,"mtime":1642664389995,"results":"43","hashOfConfig":"36"},{"size":1237,"mtime":1642664389996,"results":"44","hashOfConfig":"36"},{"size":1036,"mtime":1642664389998,"results":"45","hashOfConfig":"36"},{"size":325,"mtime":1642664389998,"results":"46","hashOfConfig":"36"},{"size":685,"mtime":1642664389998,"results":"47","hashOfConfig":"36"},{"size":1268,"mtime":1642664389996,"results":"48","hashOfConfig":"36"},{"size":1723,"mtime":1642664389996,"results":"49","hashOfConfig":"36"},{"size":604,"mtime":1642664389996,"results":"50","hashOfConfig":"36"},{"size":500,"mtime":1643115035093,"results":"51","hashOfConfig":"52"},{"size":1987,"mtime":1644052063762,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":1643115035093,"results":"54","hashOfConfig":"52"},{"size":2500,"mtime":1643115035103,"results":"55","hashOfConfig":"52"},{"size":930,"mtime":1643699145767,"results":"56","hashOfConfig":"52"},{"size":2725,"mtime":1643115035103,"results":"57","hashOfConfig":"52"},{"size":1153,"mtime":1644052189838,"results":"58","hashOfConfig":"52"},{"size":626,"mtime":1644057769433,"results":"59","hashOfConfig":"52"},{"size":1230,"mtime":1643773313552,"results":"60","hashOfConfig":"52"},{"size":380,"mtime":1643932523931,"results":"61","hashOfConfig":"52"},{"size":1036,"mtime":1643964988723,"results":"62","hashOfConfig":"52"},{"size":1422,"mtime":1644053289730,"results":"63","hashOfConfig":"52"},{"size":604,"mtime":1643115035097,"results":"64","hashOfConfig":"52"},{"size":1723,"mtime":1643891047513,"results":"65","hashOfConfig":"52"},{"size":8058,"mtime":1644054895512,"results":"66","hashOfConfig":"52"},{"size":1303,"mtime":1643699901183,"results":"67","hashOfConfig":"52"},{"size":7471,"mtime":1643944875046,"results":"68","hashOfConfig":"52"},{"size":950,"mtime":1643963963239,"results":"69","hashOfConfig":"52"},{"size":1139,"mtime":1644054860142,"results":"70","hashOfConfig":"52"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1xv1kee",{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"1p1u54g",{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"103"},{"filePath":"107","messages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"103"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"103"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"103"},{"filePath":"136","messages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/index.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/App.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/reportWebVitals.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Home.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Profile.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Login.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/pages/Signup.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/Footer/index.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/Header/index.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/auth.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/queries.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/utils/mutations.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/ProfileList/index.js",[],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/SkillForm/index.js",["144"],"/Users/Tom/Bootcamp/Gitlab/usyd-syd-fsf-pt-08-2021-u-c/Unit-21-MERN/01-Activities/23-Ins_Decode-JWT/client/src/components/SkillsList/index.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/index.js",[],["145","146"],"/Users/Tom/Bootcamp/SpeakEasy/client/src/App.js",["147"],"import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nimport Home from \"./pages/Home\";\nimport Profile from \"./pages/Profile\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\n// import Button from \"@material-ui/core/Button\";\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem(\"id_token\");\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"flex-column justify-flex-start min-100-vh\">\n          <Header />\n          <div className=\"container\">\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route exact path=\"/login\">\n              <Login />\n            </Route>\n            <Route exact path=\"/signup\">\n              <Signup />\n            </Route>\n            {/* <Route exact path=\"/profiles/:profileId\">\n              <Profile />\n            </Route> */}\n          </div>\n          <Footer />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","/Users/Tom/Bootcamp/SpeakEasy/client/src/reportWebVitals.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Login.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Profile.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Signup.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/pages/Home.js",["148","149"],"import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\n\nimport Translator from \"../components/Translator\";\nimport ProfileList from \"../components/ProfileList/ProfileList\";\n\nimport { QUERY_PROFILES } from \"../utils/queries\";\nimport auth from \"../utils/auth\";\n\nconst Home = () => {\n  // is user is not authenticated, redirect to /login\n  if (!auth.loggedIn()) {\n    window.location.href = \"/login\";\n  }\n  const { loading, data } = useQuery(QUERY_PROFILES);\n  const profiles = data?.profiles || [];\n\n  return (\n    <main>\n      <div className=\"flex-row justify-center\">\n        <div className=\"col-12 col-md-10 my-3\">\n          {loading ? (\n            <div>Loading...</div>\n          ) : (\n            // <div>\n            //   <profile />\n            // </div>\n            // <div>\n            //   <ProfileList profiles={profiles} title={\"hello\"}/>\n            // </div>\n            <div>\n              <Translator />\n            </div>\n          )}\n        </div>\n      </div>\n    </main>\n  );\n};\n/* //   profiles={profiles}\n            //   title=\"Here's the current roster of friends...\"\n            // </div> */\n\nexport default Home;\n","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Footer/index.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Header/index.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/queries.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/auth.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/mutations.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/components/SkillsList/index.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/components/SkillForm/index.js",["150"],"import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\n\nimport { ADD_SKILL } from '../../utils/mutations';\n\nimport Auth from '../../utils/auth';\n\nconst SkillForm = ({ profileId }) => {\n  const [skill, setSkill] = useState('');\n\n  const [addSkill, { error }] = useMutation(ADD_SKILL);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    try {\n      const data = await addSkill({\n        variables: { profileId, skill },\n      });\n\n      setSkill('');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  return (\n    <div>\n      <h4>Endorse some more skills below.</h4>\n\n      {Auth.loggedIn() ? (\n        <form\n          className=\"flex-row justify-center justify-space-between-md align-center\"\n          onSubmit={handleFormSubmit}\n        >\n          <div className=\"col-12 col-lg-9\">\n            <input\n              placeholder=\"Endorse some skills...\"\n              value={skill}\n              className=\"form-input w-100\"\n              onChange={(event) => setSkill(event.target.value)}\n            />\n          </div>\n\n          <div className=\"col-12 col-lg-3\">\n            <button className=\"btn btn-info btn-block py-3\" type=\"submit\">\n              Endorse Skill\n            </button>\n          </div>\n          {error && (\n            <div className=\"col-12 my-3 bg-danger text-white p-3\">\n              {error.message}\n            </div>\n          )}\n        </form>\n      ) : (\n        <p>\n          You need to be logged in to endorse skills. Please{' '}\n          <Link to=\"/login\">login</Link> or <Link to=\"/signup\">signup.</Link>\n        </p>\n      )}\n    </div>\n  );\n};\n\nexport default SkillForm;\n","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/Translator.js",["151","152","153","154","155","156","157","158","159","160","161"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nimport TextField from \"@mui/material/TextField\";\nimport Autocomplete from \"@mui/material/Autocomplete\";\nimport Button from \"@mui/material/Button\";\nimport Box from \"@mui/material/Box\";\nimport MicIcon from \"@mui/icons-material/Mic\";\nimport VolumeUpIcon from \"@mui/icons-material/VolumeUp\";\nimport IconButton, { IconButtonClasses } from \"@mui/material/IconButton\";\nimport { styled, createTheme, ThemeProvider } from \"@mui/system\";\nimport * as sdk from \"microsoft-cognitiveservices-speech-sdk\";\nimport { useMutation } from \"@apollo/client\";\nimport { useQuery } from \"@apollo/client\";\nimport { languages } from \"../utils/language-code\";\nimport { activateTextToSpeech } from \"../utils/speech\";\n\nimport { ADD_INPUT_PHRASE, REMOVE_ALL_TRANSLATIONS } from \"../utils/mutations\";\nimport { ADD_TRANSLATED_PHRASE } from \"../utils/mutations\";\nimport { QUERY_SINGLE_PROFILE } from \"../utils/queries\";\n\nimport Auth from \"../utils/auth\";\nimport { getTokenOrRefresh } from \"../utils/token\";\n\nconst Translator = () => {\n  const [addInputPhrase, { error: inputPhraseError }] =\n    useMutation(ADD_INPUT_PHRASE);\n  const [addTranslatedPhrase, { error: translatedPhraseError }] = useMutation(\n    ADD_TRANSLATED_PHRASE\n  );\n  const [removeAllTranslations, { error: removeAllTranslationsError }] =\n    useMutation(REMOVE_ALL_TRANSLATIONS);\n\n  const profileQuery = useQuery(QUERY_SINGLE_PROFILE, {\n    variables: { profileId: Auth.getProfile().data._id },\n  });\n\n  const activateTranslate = async (inputText) => {\n    console.log(languageFrom, languageTo);\n\n    const profileId = Auth.getProfile().data._id;\n    const data = await addInputPhrase({\n      variables: { profileId, inputPhrase: inputText },\n    });\n    // addInputPhrase(inputText)\n\n    axios\n      .post(\"/api/translate/\", {\n        fromLang: languageFrom,\n        toLang: languageTo,\n        userText: inputText,\n      })\n      .then(async function (response) {\n        console.log(response);\n\n        const translated = response.data.text + \"@@\" + languageTo;\n        const translatedData = await addTranslatedPhrase({\n          variables: { profileId, translatedPhrase: translated },\n        });\n        // store the translated text to db\n        setTranslationOutput(response.data.text);\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  };\n\n  const sttFromMic = async (test) => {\n    console.log(test);\n    const tokenObj = await getTokenOrRefresh();\n    const speechConfig = sdk.SpeechConfig.fromAuthorizationToken(\n      tokenObj.authToken,\n      tokenObj.region\n    );\n    speechConfig.speechRecognitionLanguage = languageFrom;\n    let state = \"\";\n    state = \"INITIALIZED: ready to test speech...\";\n\n    const audioConfig = sdk.AudioConfig.fromDefaultMicrophoneInput();\n    const recognizer = new sdk.SpeechRecognizer(speechConfig, audioConfig);\n\n    state = \"speak into your microphone...\";\n\n    recognizer.recognizeOnceAsync((result) => {\n      // setTimeout(() => {\n      //   activateTranslate()\n      // }, 0)\n\n      let displayText;\n      if (result.reason === sdk.ResultReason.RecognizedSpeech) {\n        displayText = `RECOGNIZED: Text=${result.text}`;\n        setUserText(result.text);\n        setTimeout(() => {\n          activateTranslate(result.text);\n        }, 0);\n      } else {\n        displayText =\n          \"ERROR: Speech was cancelled or could not be recognized. Ensure your microphone is working properly.\";\n      }\n\n      console.log(result.text);\n      console.log(displayText);\n      // state = displayText\n      return result;\n    });\n  };\n\n  const clearAll = async () => {\n    // let\n    const clearPhrases = await removeAllTranslations({\n      variables: { profileId: Auth.getProfile().data._id },\n    });\n    profileQuery.refetch();\n  };\n  const [clearTranslations, setClearTranslations] = useState(\"\");\n  const [languageFrom, setLanguageFrom] = useState(\"en-US\");\n  const [languageTo, setLanguageTo] = useState(\"fr-FR\");\n  const [userText, setUserText] = useState(\"Hello World - Translate me\");\n  const [translationOutput, setTranslationOutput] = useState(\"\");\n  const [translatedSpeech] = useState(\"\");\n\n  const customTheme = createTheme({\n    palette: {\n      primary: {\n        main: \"#1976d2\",\n        contrastText: \"white\",\n      },\n    },\n  });\n\n  const MyThemeComponent = styled(\"div\")(({ theme }) => ({\n    color: theme.palette.primary.contrastText,\n    backgroundColor: theme.palette.primary.main,\n    padding: theme.spacing(1),\n    borderRadius: theme.shape.borderRadius,\n  }));\n\n  return (\n    <div>\n      <Box\n        id=\"phraseDiv\"\n        component=\"span\"\n        minHeight=\"30px\"\n        // defaultValue=\"Translated text...\"\n        // fontColor=\"black\"\n        sx={{\n          display: \"block\",\n          p: 1,\n          m: 1,\n          bgcolor: (theme) =>\n            theme.palette.mode === \"dark\" ? \"#101010\" : \"#fff\",\n          color: (theme) =>\n            theme.palette.mode === \"dark\" ? \"grey.300\" : \"grey.800\",\n          border: \"1px solid\",\n          borderColor: (theme) =>\n            theme.palette.mode === \"dark\" ? \"grey.800\" : \"grey.300\",\n          borderRadius: 2,\n          fontSize: \"0.875rem\",\n          fontWeight: \"700\",\n        }}\n      >\n        {translationOutput}\n      </Box>\n      <div>{translatedSpeech}</div>\n      <ThemeProvider theme={customTheme}>\n        <MyThemeComponent>{translationOutput}</MyThemeComponent>\n      </ThemeProvider>\n      <IconButton>\n        <VolumeUpIcon\n          id=\"startSpeakTextAsyncButton\"\n          color=\"primary\"\n          fontSize=\"large\"\n          onClick={() => activateTextToSpeech(languageTo, translationOutput)}\n        />\n      </IconButton>\n      <TextField\n        id=\"filled-multiline-static\"\n        // label=\"Text to be translated\"\n        multiline\n        rows={4}\n        defaultValue={userText}\n        variant=\"filled\"\n        value={userText}\n        onChange={(event) => {\n          setUserText(event.target.value);\n          //call the api response = apirCAll()\n          // setTranslationOutput(response)\n        }}\n      />\n      <Autocomplete\n        disablePortal\n        id=\"combo-box-demo\"\n        placeholder=\"English\"\n        defaultValue={{ label: \"English\" }}\n        options={languages}\n        sx={{ width: 300 }}\n        renderInput={(params) => <TextField {...params} label=\"Language\" />}\n        onChange={(event, newValue) => {\n          setLanguageFrom(newValue.languagecode);\n        }}\n      />\n      <Autocomplete\n        disablePortal\n        placeholder=\"French\"\n        id=\"combo-box-demo\"\n        options={languages}\n        sx={{ width: 300 }}\n        defaultValue={{ label: \"French\" }}\n        renderInput={(params) => <TextField {...params} label=\"Language\" />}\n        onChange={(event, newValue) => {\n          setLanguageTo(newValue.languagecode);\n        }}\n      />\n      <Button onClick={() => activateTranslate(userText)} variant=\"contained\">\n        Translate\n      </Button>\n      {/* {translationOutput.length > 0 && (<Button onClick={activateTextToSpeech} variant=\"contained\">\n        Text to Speech\n      </Button>)} */}\n      <IconButton>\n        <MicIcon fontSize=\"large\" onClick={sttFromMic} color=\"primary\" />\n      </IconButton>\n      {/* <Button onClick={sttFromMic} variant=\"contained\">\n        Speech to text\n      </Button> */}\n      <Button onClick={() => clearAll(userText)} variant=\"contained\">\n        Clear\n      </Button>\n      {!profileQuery.loading &&\n        profileQuery?.data?.profile?.inputPhrases.map((phrase) => {\n          return <div> {phrase} </div>;\n        })}\n\n      {!profileQuery.loading &&\n        profileQuery?.data?.profile?.translatedPhrases.map((phrase) => {\n          const splitted = phrase.split(\"@@\");\n          const translation = splitted[0];\n          const lang = splitted[1];\n          return (\n            <div onClick={() => activateTextToSpeech(lang, translation)}>\n              {translation}\n            </div>\n          );\n        })}\n    </div>\n  );\n};\n\nexport default Translator;\n","/Users/Tom/Bootcamp/SpeakEasy/client/src/components/ProfileList/ProfileList.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/language-code.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/token.js",[],"/Users/Tom/Bootcamp/SpeakEasy/client/src/utils/speech.js",[],{"ruleId":"162","severity":1,"message":"163","line":18,"column":13,"nodeType":"164","messageId":"165","endLine":18,"endColumn":17},{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"162","severity":1,"message":"170","line":12,"column":8,"nodeType":"164","messageId":"165","endLine":12,"endColumn":15},{"ruleId":"162","severity":1,"message":"171","line":5,"column":8,"nodeType":"164","messageId":"165","endLine":5,"endColumn":19},{"ruleId":"162","severity":1,"message":"172","line":16,"column":9,"nodeType":"164","messageId":"165","endLine":16,"endColumn":17},{"ruleId":"162","severity":1,"message":"163","line":18,"column":13,"nodeType":"164","messageId":"165","endLine":18,"endColumn":17},{"ruleId":"162","severity":1,"message":"173","line":1,"column":27,"nodeType":"164","messageId":"165","endLine":1,"endColumn":36},{"ruleId":"162","severity":1,"message":"174","line":10,"column":22,"nodeType":"164","messageId":"165","endLine":10,"endColumn":39},{"ruleId":"162","severity":1,"message":"175","line":26,"column":35,"nodeType":"164","messageId":"165","endLine":26,"endColumn":51},{"ruleId":"162","severity":1,"message":"176","line":28,"column":40,"nodeType":"164","messageId":"165","endLine":28,"endColumn":61},{"ruleId":"162","severity":1,"message":"177","line":31,"column":42,"nodeType":"164","messageId":"165","endLine":31,"endColumn":68},{"ruleId":"162","severity":1,"message":"163","line":42,"column":11,"nodeType":"164","messageId":"165","endLine":42,"endColumn":15},{"ruleId":"162","severity":1,"message":"178","line":57,"column":15,"nodeType":"164","messageId":"165","endLine":57,"endColumn":29},{"ruleId":"162","severity":1,"message":"179","line":82,"column":5,"nodeType":"164","messageId":"165","endLine":82,"endColumn":10},{"ruleId":"162","severity":1,"message":"180","line":110,"column":11,"nodeType":"164","messageId":"165","endLine":110,"endColumn":23},{"ruleId":"162","severity":1,"message":"181","line":115,"column":10,"nodeType":"164","messageId":"165","endLine":115,"endColumn":27},{"ruleId":"162","severity":1,"message":"182","line":115,"column":29,"nodeType":"164","messageId":"165","endLine":115,"endColumn":49},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["183"],"no-negated-in-lhs",["184"],"'Profile' is defined but never used.","'ProfileList' is defined but never used.","'profiles' is assigned a value but never used.","'useEffect' is defined but never used.","'IconButtonClasses' is defined but never used.","'inputPhraseError' is assigned a value but never used.","'translatedPhraseError' is assigned a value but never used.","'removeAllTranslationsError' is assigned a value but never used.","'translatedData' is assigned a value but never used.","'state' is assigned a value but never used.","'clearPhrases' is assigned a value but never used.","'clearTranslations' is assigned a value but never used.","'setClearTranslations' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]